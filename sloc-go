#!/usr/bin/perl
use strict;
use warnings;
use Fcntl ':mode';
use File::Basename;
use File::Find;
use OpenBSD::Pledge;
use OpenBSD::Unveil;
use v5.030;

pledge(qw( rpath unveil )) || die $!;

my $source_path = $ARGV[0] || '.';
my $work_dir = $source_path;
if ($work_dir ne '.') {
	my $mode = (stat($work_dir))[2] || die $!;
	if (Fcntl::S_ISREG($mode)) {
		$work_dir = dirname($work_dir);
	}
	chdir($work_dir) || die $!;
}
unveil($work_dir, 'r') || die $!;
unveil() || die $!;

my $all = 0;
my $code = 0;
my $comments = 0;

sub process_file {
	return unless /\.go$/;
	open(my $fd, $_);
	while (readline $fd) {
		$all++;

		# skip empty/whitespace lines
		next if /^\s*$/;

		# count comments
		do { $comments++; next } if m{^\s*//};

		# count code lines
		$code++;
	}
	close $fd;
}

find(\&process_file, $source_path);

my $nonblank = $code + $comments;
die 'no matching source code found' unless $nonblank;

my $code_percent = $code / $nonblank * 100;
my $comments_percent = 100 - $code_percent;

my $len = length "$all";

printf "all       : %${len}d\n", $all;
printf "blank     : %${len}d\n", $all - $nonblank;
printf "nonblank  : %${len}d\n", $nonblank;
printf "code      : %${len}d (%.2f%%)\n", $code, $code_percent;
printf "comments  : %${len}d (%.2f%%)\n", $comments, $comments_percent;
